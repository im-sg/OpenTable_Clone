// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenTable.Models.DataLayer;

#nullable disable

namespace OpenTable.Migrations
{
    [DbContext(typeof(OpenTableDbContext))]
    partial class OpenTableDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenTable.Models.Cuisines", b =>
                {
                    b.Property<int>("CuisinesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CuisinesId");

                    b.ToTable("Cuisines");

                    b.HasData(
                        new
                        {
                            CuisinesId = 1,
                            Cuisine = "Vietnamese"
                        },
                        new
                        {
                            CuisinesId = 2,
                            Cuisine = "Greek"
                        },
                        new
                        {
                            CuisinesId = 3,
                            Cuisine = "Spanish"
                        },
                        new
                        {
                            CuisinesId = 4,
                            Cuisine = "Lebanese"
                        },
                        new
                        {
                            CuisinesId = 5,
                            Cuisine = "Brazilian"
                        });
                });

            modelBuilder.Entity("OpenTable.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OpenTable.Models.Metropolis", b =>
                {
                    b.Property<int>("MetropolisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MetropolisId");

                    b.ToTable("Metropolis");

                    b.HasData(
                        new
                        {
                            MetropolisId = 1,
                            Name = "Toronto"
                        },
                        new
                        {
                            MetropolisId = 2,
                            Name = "Vancouver"
                        },
                        new
                        {
                            MetropolisId = 3,
                            Name = "Montreal"
                        },
                        new
                        {
                            MetropolisId = 4,
                            Name = "Boston"
                        },
                        new
                        {
                            MetropolisId = 5,
                            Name = "Washington, D.C."
                        },
                        new
                        {
                            MetropolisId = 6,
                            Name = "Atlanta"
                        },
                        new
                        {
                            MetropolisId = 7,
                            Name = "Dallas"
                        });
                });

            modelBuilder.Entity("OpenTable.Models.PriceRange", b =>
                {
                    b.Property<int>("PriceRangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PriceRanges")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PriceRangeId");

                    b.ToTable("PriceRange");

                    b.HasData(
                        new
                        {
                            PriceRangeId = 1,
                            PriceRanges = "$"
                        },
                        new
                        {
                            PriceRangeId = 2,
                            PriceRanges = "$$"
                        },
                        new
                        {
                            PriceRangeId = 3,
                            PriceRanges = "$$$"
                        },
                        new
                        {
                            PriceRangeId = 4,
                            PriceRanges = "$$$$"
                        });
                });

            modelBuilder.Entity("OpenTable.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservationMadeAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TimeSlot")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("OpenTable.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("CuisinesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MetropolisId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OpenHours")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PriceRangeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RestaurantId");

                    b.HasIndex("CuisinesId");

                    b.HasIndex("MetropolisId");

                    b.HasIndex("PriceRangeId");

                    b.ToTable("Restaurant");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            Address = "88 Mott Street, Chinatown, New York, NY 10013",
                            CuisinesId = 1,
                            Description = "Authentic Sichuan and Cantonese cuisine",
                            ImagePath = "DragonPalace",
                            MetropolisId = 1,
                            OpenHours = "11:00-22:00",
                            PriceRangeId = 2,
                            RestaurantName = "Dragon Palace"
                        },
                        new
                        {
                            RestaurantId = 2,
                            Address = "123 Sunset Boulevard, Los Angeles, CA 90026",
                            CuisinesId = 1,
                            Description = "Modern Indian fusion with traditional flavors",
                            ImagePath = "SpiceRoute",
                            MetropolisId = 2,
                            OpenHours = "12:00-23:00",
                            PriceRangeId = 3,
                            RestaurantName = "Spice Route"
                        },
                        new
                        {
                            RestaurantId = 3,
                            Address = "456 W Randolph Street, Chicago, IL 60606",
                            CuisinesId = 4,
                            Description = "Award-winning Thai street food experience",
                            ImagePath = "BangkokNights",
                            MetropolisId = 3,
                            OpenHours = "17:00-22:00",
                            PriceRangeId = 2,
                            RestaurantName = "Bangkok Nights"
                        },
                        new
                        {
                            RestaurantId = 4,
                            Address = "789 Kirby Drive, Houston, TX 77098",
                            CuisinesId = 2,
                            Description = "Sun-drenched flavors of the Mediterranean coast",
                            ImagePath = "OliveGrove",
                            MetropolisId = 4,
                            OpenHours = "10:00-21:00",
                            PriceRangeId = 3,
                            RestaurantName = "Olive Grove"
                        },
                        new
                        {
                            RestaurantId = 5,
                            Address = "101 Grant Avenue, San Francisco, CA 94108",
                            CuisinesId = 3,
                            Description = "Modern Korean BBQ with premium ingredients",
                            ImagePath = "SeoulKitchen",
                            MetropolisId = 5,
                            OpenHours = "16:00-23:30",
                            PriceRangeId = 2,
                            RestaurantName = "Seoul Kitchen"
                        });
                });

            modelBuilder.Entity("OpenTable.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpenTable.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpenTable.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenTable.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpenTable.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenTable.Models.Reservation", b =>
                {
                    b.HasOne("OpenTable.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OpenTable.Models.Restaurant", b =>
                {
                    b.HasOne("OpenTable.Models.Cuisines", "Cuisines")
                        .WithMany()
                        .HasForeignKey("CuisinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenTable.Models.Metropolis", "Metropolis")
                        .WithMany()
                        .HasForeignKey("MetropolisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenTable.Models.PriceRange", "PriceRange")
                        .WithMany()
                        .HasForeignKey("PriceRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisines");

                    b.Navigation("Metropolis");

                    b.Navigation("PriceRange");
                });
#pragma warning restore 612, 618
        }
    }
}
